#!/bin/bash -
#==============================================================================
#
#          FILE: functions.sh
#
#         USAGE: ./functions.sh
#
#   DESCRIPTION:
#
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: YOUR NAME (),
#  ORGANIZATION:
#       CREATED: 08/08/20 11:14
#      REVISION:  ---
#
# shellcheck source=/dev/null
#==============================================================================

# =============================================================================
# venv
# Activate virtualenv
#
# :param env:   Name of the virtual env
# :param path:  Path to the virtual env
# =============================================================================
venv() {
    env="${1:-"venv"}"; path_="${2:-"."}"
    if [[ ! -d "$env" ]]; then
        env=".venv"
    fi
    if [[ ! -d "$env" ]]; then
        if [ $# -eq 0 ]; then
            printf "cannot find \`venv' or \`.venv' in this directory"$'\n'
            printf ". try entering the path to the virtual environment manually"$'\n'
            printf "  i.e. \`venv \"/path/to/virtualenv\"'"$'\n'
        else
            printf "cannot find %s"$'\n' "$1"
        fi
        return 1
    fi
    venv="$path_/$env"
    activate="$venv/bin/activate"
    source "$activate"
}


# =============================================================================
# venv_module
# Activate virtualenv if not activated
# =============================================================================
venv_module() {
    if [[ "$VIRTUAL_ENV" == "" ]]; then
        venv "$@"
    fi
}


# =============================================================================
# gitstamp
# Automatic commit with message and timestamp
# =============================================================================
gitstamp() {
    msg="${1:=""}"
    git commit -m "{\"$msg\": \"$(dt)\"}"
}


# =============================================================================
# dtname
# Return a name in the following format
# name.date:time.extension
#
# :param name: The command's name
# =============================================================================
dtname() {
    name="${1:=""}"
    extension="$2"
    output="$name.$(date +'%Y.%m.%d:%H.%M.%S')"
    if [[ -z "$2" ]]; then
        echo "$output"
    else
        echo "$output"."$extension"
    fi
}


# =============================================================================
# redir
# Redirect stdout of a command into a file with the `dtname' format. eg...
# redir speedtest extension
# > speedtest.date:time.extension
#
# :param cmd: The command's stdout and stderr
# =============================================================================
redir() {
    cmd="$1"
    extension="$2"
    "$cmd" > "$(dtname "$cmd" "$extension")"
}


# =============================================================================
# sign-prev
# Gpg sign and rebase previous commits
#
# :optional param: commit hash - default: previous commit
# =============================================================================
sign-prev() {
    commit=$1
    if [[ $# -eq 0 ]]; then
        if git cat-file -e HEAD^ > /dev/null 2>&1; then
            commit="HEAD^"
        else
            commit="--root"
        fi
    fi
    git rebase --exec 'git commit --amend --no-edit -n -S' -i "$commit"
}


multiclear() {
    for _ in 1 2 3 4 5 6 7 8 9 10; do clear; done
}


pkgtest() {
    multiclear
    ../.venv/bin/python3.8 -m pytest ../tests
}


lynis-go () {
    pacman -Syyu
    sysctl --system
    lynis audit system
}


cpbak () {
    src="$1"; dst="$2";
    srcfile="$(basename "$src")"
    dstname="$(date +'%Y.%m.%d:%H.%M.%S').${srcfile}"
    fulldst="$dst/$dstname"
    cp "$srcfile" "$fulldst"
    echo "backed up \`$src' to \`$fulldst'"
}


# =============================================================================
# vim
# Override /usr/bin/vim to add option to run the ide version of vim in
# .dotfiles/vim/rc or the simplified version (both alternately symlinked to
# .dotfiles/vim/vimrc)
#
# :optional param arg: -i/--ide switch - default: false
# =============================================================================
vim () {
  vim_dir="$HOME/.vim"
  rc_dir="$vim_dir/rc"
  base="$rc_dir/vimrc.vim"
  ide="$rc_dir/vimide.vim"
  link="$vim_dir/vimrc"
  if [[ "$1" == "-i" ]] || [[ "$1" == "--ide" ]]; then
      shift
      select="$ide"
  else
      select="$base"
  fi
  rm -f "$link" > /dev/null 2>&1
  ln -s "$select" "$link"
  "$_VIM" "$@"
}


# =============================================================================
# vim
# Compress a file or directory whilst adding a timestamp and then relocate it
# to a dated archive directory
#
# :param file: File or directory (relative path)
# =============================================================================
mkarchive () {
    file="$1"; shift;
    if [[ $# -ne 0 ]]; then
    	exclude="$1"; shift
    fi
    _date="$(date +'%Y/%m/%d')"
    time="$(date +'%H%M%S')"
    basename="Documents/Archive"
    archivedir="$HOME/$basename"
    _path="$archivedir/$_date"
    archive="${file}${time}.tar.gz"
    fullpath="$_path/$archive"
    tmp="/tmp/mkarchive.exclude"
    # shellcheck disable=SC2088
    simplified="~/$basename/$_date/$archive"
    if [[ "$exclude" == "-e" ]] || [[ "$exclude" == "--exclude" ]]; then
        files=( "${@}" )
        mkdir "$tmp"
        for f in "${files[@]}"; do
            mv "$file/$f" "$tmp/$f"
        done
    fi
    if [[ ! -d "$_path" ]]; then
        mkdir -p "$_path" || return 1
        printf "added %s"$'\n' "\`$_path'"
    fi
    printf "making archive:"$'\n'
    tar czf "$archive" "$file" || return 1
    printf "....created %s"$'\n' "\`$archive'"
    printf "storing archive:"$'\n'
    _dirname="$(dirname "$fullpath")"
    if [[ ! -d "$_dirname" ]]; then
        mkdir -p "$_dirname" || return 1
        printf "added %s"$'\n' "\`$_path'"
    fi
    mv "$archive" "$fullpath" || return 1
    printf "....%s -> %s"$'\n' "$archive" "$simplified"
    if [[ -d ".tmp" ]]; then
        mv "$tmp/*" "$file"
        mv "$tmp/.*" "$file"
    fi
    printf "done"$'\n'
}


no-ci () {
    git commit -m "[no ci]" "$@"
}


mkportfile () {
    if [[ ! -f "$SECRET" ]]; then
        {
            echo '#!/bin/bash -'
            echo 'SSH_PORT="22"'
            echo 'export SSH_PORT'

        } > "$SECRET"
    fi
}


cryptdir () {
    recipient="$1"; directory="$2"
    if [[ "$#" != 2 ]] || [[ "$1" == "-h" ]]; then
        printf "usage: chrclone [-h] recipient directory"$'\n\n'
        printf "positional arguments:"$'\n'
        printf "  recipient     the gpg key-id or email"$'\n'
        printf "  directory     the directory to compress and encrypt"$'\n\n'
        printf "optional arguments:"$'\n'
        printf "  -h, --help    show this help message and exit"$'\n'
        return 0
    fi
    tardir="${directory}.tar.gz"
    gpgdir="${tardir}.gpg"
    printf "compressing %s"$'\n' "\`$directory'"
    tar czf "$tardir" "$directory" || return 1
    printf "....%s -> %s"$'\n' "\`$directory'" "\`$tardir'"
    printf "removing %s"$'\n' "\`$directory'"
    rm -rf "$directory" >/dev/null 2>&1 || return 1
    printf "....%s removed"$'\n' "\`$directory'"
    printf "encrypting %s"$'\n' "\`$tardir'"
    gpg -o "$gpgdir" -r "$recipient" -e "$tardir" || return 1
    printf "....%s -> %s"$'\n' "\`$tardir'" "\`$gpgdir'"
    printf "removing %s"$'\n' "$tardir"
    rm -rf "$tardir" >/dev/null 2>&1 || return 1
    printf "....%s removed"$'\n' "\`$tardir'"
    printf "done"$'\n'
}


decryptdir () {
    directory=$(echo "$1" | cut -f 1 -d '.')
    tardir="${directory}.tar.gz"
    gpgdir="${tardir}.gpg"

    printf "decrypting %s"$'\n' "\`$gpgdir'"
    gpg -o "$tardir" -d "$gpgdir" || return 1

    printf "....%s -> %s"$'\n' "\`$gpgdir'" "\`$tardir'"

    printf "removing %s"$'\n' "\`$gpgdir'"
    rm -rf "$gpgdir" >/dev/null 2>&1 || return 1

    printf "....%s removed"$'\n' "\`$gpgdir'"

    printf "extracting %s"$'\n' "\`$tardir'"
    tar xzf "$tardir" || return 1

    printf "....%s -> %s"$'\n' "\`$tardir'" "\`$directory'"

    printf "removing %s"$'\n' "\`$tardir'"
    rm -rf "$tardir" >/dev/null 2>&1 || return 1

    printf "....%s removed"$'\n' "\`$tardir'"

    printf "done"$'\n'
}


kcryptdir () {
    directory="$1"
    cryptdir "$KEYID" "$directory"
}


reset-chmod () {
    opt="$1"; _path="$2"
    if [[ "$opt" == "-f" ]] || [[ "$opt" == "--file" ]] || [[ "$opt" == "--all" ]]; then
        find "$_path" -type f -exec chmod 644 {} \;
    fi
    if [[ "$opt" == "-d" ]] || [[ "$opt" == "--dir" ]] || [[ "$opt" == "--all" ]]; then
        find "$_path" -type d -exec chmod 755 {} \;
    fi
}


cwdpurge () {
    arg="$1"; item="$2"
    if [[ "$arg" == "empty" ]]; then
        if [[ "$item" == "dir" ]]; then
            find . -type d -empty -delete
        fi
    elif [[ "$arg" == "broken" ]]; then
        if [[ "$arg" == "item" ]]; then
            find . -xtype l -delete
        fi
    fi
}


nocigitcommit () {
    git commit -m "[ci skip] $1"
}


fsearch () {
    sudo updatedb
    locate "$1" \
        | grep -v Repositories \
        | grep -v Archive \
        | grep -v virtualenvs \
        | grep -v pylint.d \
        | grep -v JetBrains \
        | grep -v gitkraken
}


clean_data_dirs () {
    items=( $(fsearch "$1") )
    for i in "${items[@]}"; do
    rm -rf "$i"
    done
}


getfw () {
    echo "Name: Black"
    echo "File type: Python"
    echo "Scope: Project Files"
    echo "Program: $(which black)"
    echo "Arguments: \$FilePath\$"
    echo "Output paths to refresh: \$FilePath\$"
    echo "Working directory: \$ProjectFileDir\$"
    echo "Uncheck \"Auto-save edited files to trigger the watcher\" in Advanced Options"
}
