"""
Dictionary sorted by symlink destination.
Source relative to ~/.dotfiles.

The dirs key contains a dictionary of destinations paired with
dictionaries of directories and their files.

The directories will be symlinked from ~/.dotfiles to their destination
and the files will be symlinked to that directory's symlink.

e.g. bash in ~/. in dirs            ~/.dotfiles/bash    -> ~/.bash
     bashrc in bash in ~/. in dirs  ~/.bash/bashrc      -> ~/.bashrc

The file key contains a dictionary of destinations paired with lists of
individual files or directories that will be symlinked individually.
"""
import os

import yaml

COMMENTS = "# --- autogenerated default conf ---\n#{}".format(
    __doc__.lower().replace("\n", "\n# ")[:-2]
)
DOTCONTENTS = dict(
    dirs={
        "~/.": {
            "bash": ["bashrc", "bash_profile"],
            "dir_colors.d": ["dir_colors"],
            "gem": ["gemrc"],
            "git.d": ["gitconfig"],
            "hidden.d": ["hidden"],
            "neomutt": ["neomuttrc"],
            "vim": ["vimrc"],
            "zsh": ["zshrc"],
        },
    },
    files={
        "~/.config/Code/User/": [
            "vscode.d/settings.json",
            "vscode.d/keybindings.json",
        ],
    },
)


class Yaml:
    def __init__(self, path):
        super().__init__()
        self.path = path
        self.dir = os.path.dirname(path)
        self.exists = os.path.isfile(self.path)
        self.dict = {}

    def write(self):
        if os.path.isdir(self.dir):
            with open(self.path, "w") as fout:
                yaml.dump(self.dict, fout)
            self.exists = True

    def read(self):
        if self.exists:
            with open(self.path) as fin:
                self.dict.update(yaml.safe_load(fin))
