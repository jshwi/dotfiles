#!/bin/zsh
DOTFILES="$HOME/.dotfiles"
VIM="$DOTFILES/vim"
VIMRC="$vim/vimrc"


venv() {
    # activate virtualenv
    # :param path_: path to the virtual env
    # :param env:   name of the virtual env
    default="venv"
    if [[ ! -d venv ]]; then
        default=".venv"
    fi
    env="${1:="$default"}"
    path_="${2:="."}"
    if [[ ! -d "$env" ]]; then
        env=".venv"
    fi
    if [[ ! -d "$env" ]]; then
        printf "Cannot find \`venv\` or \`.venv\`"$'\n'
        printf "Enter virtual environment directory manually"$'\n'
        printf "i.e. venv <VIRTUALENV>"$'\n'
    fi
    venv="$path_/$env"
    activate="$venv/bin/activate"
    source "$activate"
}


notes() {
    # open new notes in a with a well organised /year/month/day/time.txt format
    # note: if note in the dirname of the notes path, a whole new path will be
    # created
    # :param path_ : path tp the notebook directory
    path_="${1:="."}"
    lower="$path_/notebook"
    caps="$path_/Notebook"
    if [[ ! -d "$lower" && ! -d "$caps" ]]; then
        echo "'$lower' or '$caps' don't exist"
    else
        if [ -d "$lower" ]; then
            fullpath="$lower"
        elif [ -d "$caps" ]; then
            fullpath="$caps"
        fi
        extension="${2:='md'}"
        subdirs="$(date +"%Y/%m/%d")"
        note="$(date +"%T").$extension"
        notepath="$fullpath/$subdirs"
        mkdir -p "$notepath"
        vim "$notepath/$note"
    fi
}


venv_module() {
    if [[ "$VIRTUAL_ENV" == "" ]]
    then
        venv
    fi
}


gitstamp() {
    msg="${1:=""}"
    git commit -m "{\"$msg\": \"$(dt)\"}"
}


dtname() {
    # return a name in the following format
    # name.date:time.extension
    name="${1:=""}"
    extension="$2"
    output="$name.$(date +'%Y.%m.%d:%H.%M.%S')"
    if [ -z "$2" ]; then
        echo "$output"
    else
        echo "$output"."$extension"
    fi
}


redir() {
    # redirect stdout of a command into a file with the `dtname` format. eg...
    # redir speedtest extension
    # > speedtest.date:time.extension
    cmd="$1"
    extension="$2"
    "$cmd" > $(dtname "$cmd" "$extension")
}

sign-prev() {
    commit=$1
    if [ $# -eq 0 ]; then
        git cat-file -e HEAD^ > /dev/null 2>&1
        [ $? -eq 0 ] && commit="HEAD^" || commit="--root"
    fi
    git rebase --exec 'git commit --amend --no-edit -n -S' -i $commit
}


vim() {
    rm -f "$VIMRC" > /dev/null 2>&1
    ln -s "$VIM/rc/vimrc" "$VIMRC"
    /usr/bin/vim "$@"
}

no-ci-commit() {
    git commit -m "[no ci] $@"
}

multiclear() {
    for i in {1..10}; do clear; done
}

pkgtest() {
    multiclear
    ../.venv/bin/python3.8 -m pytest ../tests
}


rcommit() {
  git add .
  gitstamp
}

rcomp() {
  rcommit
  git push
}


git-unused() {
  git ls-files | xargs ctags
  unused --ignore /home/stephen/.noSync/Projects/jnotes/tests/
}

