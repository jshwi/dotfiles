#!/bin/bash -
#==============================================================================
#
#          FILE: functions.sh
#
#         USAGE: ./functions.sh
#
#   DESCRIPTION:
#
#       OPTIONS: ---
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: YOUR NAME (),
#  ORGANIZATION:
#       CREATED: 08/08/20 11:14
#      REVISION:  ---
#==============================================================================


# =============================================================================
# venv
# Activate virtualenv
#
# :param env:   Name of the virtual env
# :param path:  Path to the virtual env
# =============================================================================
venv() {
    default="venv"
    if [[ ! -d venv ]]; then
        default=".venv"
    fi
    env="${1:="$default"}"
    path_="${2:="."}"
    if [[ ! -d "$env" ]]; then
        env=".venv"
    fi
    if [[ ! -d "$env" ]]; then
        printf "Cannot find \`venv\` or \`.venv\`"$'\n'
        printf "Enter virtual environment directory manually"$'\n'
        printf "i.e. venv <VIRTUALENV>"$'\n'
    fi
    venv="$path_/$env"
    activate="$venv/bin/activate"
    source "$activate"
}


# =============================================================================
# venv_module
# Activate virtualenv if not activated
# =============================================================================
venv_module() {
    if [[ "$VIRTUAL_ENV" == "" ]]; then
        venv
    fi
}


# =============================================================================
# gitstamp
# Automatic commit with message and timestamp
# =============================================================================
gitstamp() {
    msg="${1:=""}"
    git commit -m "{\"$msg\": \"$(dt)\"}"
}


# =============================================================================
# dtname
# Return a name in the following format
# name.date:time.extension
#
# :param name: The command's name
# =============================================================================
dtname() {
    name="${1:=""}"
    extension="$2"
    output="$name.$(date +'%Y.%m.%d:%H.%M.%S')"
    if [[ -z "$2" ]]; then
        echo "$output"
    else
        echo "$output"."$extension"
    fi
}


# =============================================================================
# redir
# Redirect stdout of a command into a file with the `dtname' format. eg...
# redir speedtest extension
# > speedtest.date:time.extension
#
# :param cmd: The command's stdout and stderr
# =============================================================================
redir() {
    cmd="$1"
    extension="$2"
    "$cmd" > $(dtname "$cmd" "$extension")
}


# =============================================================================
# sign-prev
# Gpg sign and rebase previous commits
#
# :optional param: commit hash - default: previous commit
# =============================================================================
sign-prev() {
    commit=$1
    if [[ $# -eq 0 ]]; then
        git cat-file -e HEAD^ > /dev/null 2>&1
        [[ $? -eq 0 ]] && commit="HEAD^" || commit="--root"
    fi
    git rebase --exec 'git commit --amend --no-edit -n -S' -i "$commit"
}


multiclear() {
    for i in 1 2 3 4 5 6 7 8 9 10; do clear; done
}


pkgtest() {
    multiclear
    ../.venv/bin/python3.8 -m pytest ../tests
}


lynis-go () {
    pacman -Syyu
    sysctl --system
    lynis audit system
}


cpbak () {
    src="$1"; dst="$2";
    srcfile="$(basename "$src")"
    dstname="$(date +'%Y.%m.%d:%H.%M.%S').${srcfile}"
    fulldst="$dst/$dstname"
    cp "$srcfile" "$fulldst"
    echo "backed up \`$src' to \`$fulldst'"
}


# =============================================================================
# vim
# Override /usr/bin/vim to add option to run the ide version of vim in
# .dotfiles/vim/rc or the simplified version (both alternately symlinked to
# .dotfiles/vim/vimrc)
#
# :optional param arg: -i/--ide switch - default: false
# =============================================================================
vim () {
    if [[ "$1" == "-i" ]] || [[ "$1" == "--ide" ]]; then
        shift
        select="$VIMRCIDE"
    else
        select="$VIMRCBASE"
    fi
    rm -f "$VIMRCLINK" > /dev/null 2>&1
    ln -s "$select" "$VIMRCLINK"
    "$VIMBIN" "$@"
}
